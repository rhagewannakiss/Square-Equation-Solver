#include <TXLib.h>
#include <stdio.h>
#include <math.h>
#include <assert.h>




typedef struct SS_Tests
{
    int    num_Test;
    double        a;
    double        b;
    double        c;
    double   x1_exp;
    double   x2_exp;
    int n_roots_exp;
} SS_Tests;

int SS_Solver_func(double a, double b, double c, double* x1, double* x2);
int Double_Diff_comp(double a, double b);
void func_Tester(/*struct*/ SS_Tests data);

//--------Enum-for-roots-cases-----------------------------------------------------------------------------

typedef enum Roots_case
{
    ZERO_Roots =  0,
    ONE_Root =    1,
    TWO_Roots =   2,
    INF_Roots =  -1
} Roots_case;

//---------------------------------MAIN--------------------------------------------------------------------

int main (void)
{

//-------Структура,-содержащая-данные-для-выполнения-тестов------------------------------------------------

    SS_Tests data_0 = {.num_Test = 1,.a = 0, .b = 5, .c = 8, .x1_exp = -1.6, .x2_exp = 0, .n_roots_exp = 1};
    SS_Tests data_1 = {.num_Test = 2,.a = 0, .b = 0, .c = 0, .x1_exp = 0, .x2_exp = 0, .n_roots_exp = -1};
    SS_Tests data_2 = {.num_Test = 3,.a = 0, .b = 0, .c = 8, .x1_exp = 0, .x2_exp = 0, .n_roots_exp = 0};
    SS_Tests data_3 = {.num_Test = 4,.a = 0, .b = 5, .c = 0, .x1_exp = 0, .x2_exp = 0, .n_roots_exp = 1};
    SS_Tests data_4 = {.num_Test = 5,.a = 1, .b = 0, .c = 0, .x1_exp = 0, .x2_exp = 0, .n_roots_exp = 1};
    SS_Tests data_5 = {.num_Test = 6,.a = 7, .b = 0, .c = 8, .x1_exp = 0, .x2_exp = 0, .n_roots_exp = 0};
    SS_Tests data_6 = {.num_Test = 7,.a = 4, .b = 0, .c = -8, .x1_exp = sqrt(2), .x2_exp = -sqrt(2), .n_roots_exp = 2};
    SS_Tests data_7 = {.num_Test = 8,.a = 1, .b = -12, .c = 36, .x1_exp = 6, .x2_exp = 0, .n_roots_exp = 1};
    SS_Tests data_8 = {.num_Test = 9,.a = -224, .b = 5, .c = -8, .x1_exp = 0, .x2_exp = 0, .n_roots_exp = 0};
    SS_Tests data_9 = {.num_Test = 10, .a = -486, .b = 5, .c = -8, .x1_exp = 0, .x2_exp = 0, .n_roots_exp = 0};
    SS_Tests data_10 = {.num_Test = 11,.a = 1, .b = -4, .c = 5, .x1_exp = -1, .x2_exp = 5, .n_roots_exp = 2};
    func_Tester(data_0);


    printf ("# Enter coefficients of a square equation a, b, c:   \n");
    printf ("# Please use real numbers instead of letters, words etc.  \n");

    double a = 0;
    double b = 0;
    double c = 0;

    while (scanf ("%lg %lg %lg", &a, &b, &c) == 3)
        {
        double x1 = 0;
        double x2 = 0;
        int n_roots = SS_Solver_func(a, b, c, &x1, &x2);


        switch (n_roots)
        {
            case ZERO_Roots: printf ("No roots found.\n");
            break;

            case ONE_Root: printf ("Given Square Equation has only 1 (one) root: x = %lg\n", x1);
            break;

            case TWO_Roots: printf ("Given Square Equation has 2 (two) roots: x1 = %lg, x2 = %lg\n", x1, x2);
            break;

            case INF_Roots: printf ("Given Square Equation has Infinite number of roots.");
            break;

            default: printf ("main(): ERROR: n_roots = %d\n", n_roots);
            break;
        }
    }
}

//---Introduction-of-a-constant-and-a-function-comparing-the-difference-of-double-numbers--------------



int Double_Diff_comp(double a, double b)
{
    const double Const_E = 0.0000000001;
    double Diff = a - b;
    if (fabs(Diff) < Const_E) return 1;
    else                      return 0;
}

//----------------Square-Equation-Solving-Function-----------------------------------------------------

int SS_Solver_func(double a, double b, double c, double* x1, double* x2)
{
    assert(x1 != NULL);
    assert(x2 != NULL);
    assert(isfinite(a));
    assert(isfinite(b));
    assert(isfinite(c));



    if (Double_Diff_comp(a,0))
    {
        if (Double_Diff_comp(b,0))
        {
            if (Double_Diff_comp(c,0))
                return (INF_Roots);
            else
               return ZERO_Roots;
        }
        else
        {
            if (Double_Diff_comp(c,0))
                return ONE_Root;
            else
                *x1 = (-c)/b;
                return ONE_Root;
        }
    }
    else
    {
        double SS_Discr = ((b*b)) - (4*a*c);
        if (SS_Discr > 0)
        {
            double sqrt_Discr = sqrt(SS_Discr);
            *x1 = ((-b) + sqrt_Discr)/(2*a);
            *x2 = ((-b) - sqrt_Discr)/(2*a);
            return TWO_Roots;
        }
        else if (Double_Diff_comp(SS_Discr,0))
        {
            *x1 = (-b)/(2*a);
            return ONE_Root;
        }
        else
            return ZERO_Roots;

     }

}

//-------Function-for-Testing------------------------------------------------------------------------------

//void change_Test(struct SS_Tests * data)
//{
//    data->a = SS_Tests->a + 1;

void func_Tester( SS_Tests data)
{
    double x1 = 0;
    double x2 = 0;
    int n_roots = SS_Solver_func(data.a, data.b, data.c, &x1, &x2);

    if ((n_roots != data.n_roots_exp)
        || (x1 != data.x1_exp)
        || (x2 != data.x2_exp ))
    {
        printf("# ErrorTest_%d! Compiled: a = %lg, b = %lg, c = %lg, x1 = %lg, x2 = %lg, n_roots = %lg.\n"
               "# Expected: x1 = %lg, x2 = %lg, n_roots = %lg.\n",
                data.num_Test,
                data.a,
                data.b,
                data.c,
                x1,
                x2,
                n_roots,
                data.x1_exp,
                data.x2_exp,
                data.n_roots_exp);
    }
}
